syntax = "proto3";

package dataflow;

option java_multiple_files = false;
option java_package = "io.activej.dataflow.proto";
option java_outer_classname = "DataflowMessagingProto";

import "stream_id.proto";
import "node.proto";
import "node_stat.proto";

message Version {
  int32 major = 1;
  int32 minor = 2;
}

message DataflowRequest {
  message Download {
    StreamId stream_id = 1;
  }

  message Execute {
    int64 task_id = 1;
    repeated Node nodes = 2;
  }

  message GetTasks {
    message TaskId {
      bool task_id_is_null = 1;
      int64 task_id = 2;
    }

    TaskId task_id = 1;
  }

  message Handshake {
    Version version = 1;
  }

  message CancelTask {
    int64 task_id = 1;
  }

  oneof request {
    Handshake handshake = 1;
    Download download = 2;
    Execute execute = 3;
    GetTasks get_tasks = 4;
    CancelTask cancel_task = 5;
  }
}

message DataflowResponse {
  enum TaskStatus {
    TASK_STATUS_NOT_SET = 0;
    RUNNING = 1;
    COMPLETED = 2;
    FAILED = 3;
    CANCELLED = 4;
  }

  message PartitionData {
    message TaskDesc {
      int64 id = 1;
      TaskStatus status = 2;
    }

    int32 running = 1;
    int32 succeeded = 2;
    int32 failed = 3;
    int32 cancelled = 4;
    repeated TaskDesc last = 5;
  }

  message Error {
    bool error_is_null = 1;
    string error = 2;
  }

  message Instant {
    bool instant_is_null = 1;
    int64 timestamp = 2;
  }

  message Result {
    Error error = 1;
  }

  message TaskData {
    TaskStatus status = 1;
    Instant start_time = 2;
    Instant finish_time = 3;
    Error error = 4;
    map<int32, NodeStat> nodes = 5;
    string graph_viz = 6;
  }

  message Handshake {
    message Ok {}
    message NotOk {
      Version minimalVersion = 1;
      string message = 2;
    }
    oneof result {
      Ok ok = 1;
      NotOk not_ok = 2;
    }
  }

  message CancelTaskAck {
    bool canceled = 1;
  }

  oneof response {
    Handshake handshake = 1;
    PartitionData partition_data = 2;
    Result result = 3;
    TaskData task_data = 4;
    CancelTaskAck cancel_task_ack = 5;
  }

}